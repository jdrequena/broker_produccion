<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Tue Mar 05 09:19:05 COT 2013
  Author:  Harcalejo
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="ContinueProvisioningProcess"
               targetNamespace="http://tigo.com/enterprise/serviceEntity/provisioning/continueProvisioningProcess/v1"
               xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
               xmlns:client="http://tigo.com/enterprise/serviceEntity/provisioning/continueProvisioningProcess/v1"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
               xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns1="http://tigo.com/enterprise/taskService/provisioning/v1"
         xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/db/OrchestratorOrders/O2_Release/LOG_ORCHESTRATOR_D_STATUS"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ns3="http://tigo.com/enterprise/serviceEntity/provisioning/orderContinueRequest/v1/schema"
         xmlns:ns4="http://tigo.com/commons/basicRequest/v1/schema"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ns5="http://xmlns.oracle.com/pcbpel/adapter/db/top/LOG_ORCHESTRATOR_D_PENDING"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns6="http://tigo.com/enterprise/serviceEntity/provisioning/continueProvisioningOrder/v1"
         xmlns:ns7="http://tigo.com/commons/generalResponse/v1/schema"
         xmlns:ns8="http://xmlns.oracle.com/pcbpel/adapter/db/OrchestratorOrders/Orchestrator/LOG_ORCHESTRATOR_PRODUCT_UPDATE"
         xmlns:ns9="http://xmlns.oracle.com/pcbpel/adapter/db/top/LOG_ORCHESTRATOR_PRODUCT_UPDATE"
         xmlns:ns10="http://tigo.hn/enterprise/faultNotificationService/createFault"
         xmlns:ns11="http://xmlns.oracle.com/pcbpel/adapter/jms/OrchestratorOrders/O2/PromotionQueue"
         xmlns:ns19="http://tigo.com/enterprise/serviceEntity/provisioning/dataChangeRequest/v1/schema"
         xmlns:ns14="http://tigo.com/enterprise/businessEntity/charge/v1/schema"
         xmlns:ns21="http://tigo.com/enterprise/basicOrderState/v1/schema"
         xmlns:ns15="http://tigo.com/commons/resources/additional/v1/schema"
         xmlns:ns12="http://tigo.com/enterprise/serviceEntity/provisioning/orderRequest/v1/schema"
         xmlns:ns17="http://tigo.com/enterprise/businessEntity/product/basic/v1/schema"
         xmlns:ns20="http://tigo.com/enterprise/serviceEntity/provisioning/fieldService/v1/schema"
         xmlns:ns18="http://tigo.com/serviceEntity/provisioning/offeringDetail/v1/schema"
         xmlns:ns13="http://tigo.com/enterprise/businessEntity/client/basic/v1/schema"
         xmlns:ns16="http://tigo.com/enterprise/serviceEntity/provisioning/order/v1/schema"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  --> 
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="continueprovisioningprocess_client" partnerLinkType="client:ContinueProvisioningProcess" myRole="BasicContinueOrderPort"/>
    <partnerLink name="LOG_ORCHESTRATOR_D_STATUS"
                 partnerLinkType="ns2:LOG_ORCHESTRATOR_D_STATUS_plt"
                 partnerRole="LOG_ORCHESTRATOR_D_STATUS_role"/>
    <partnerLink name="ContinueProvisioningMediator.ContinueProvisioningMediator"
                 partnerLinkType="ns6:ContinueProvisioningMediator.ContinueProvisioningMediator"
                 partnerRole="BasicContinueOrderPort"/>
    <partnerLink name="LOG_ORCHESTRATOR_PRODUCT_UPDATE"
                 partnerLinkType="ns8:LOG_ORCHESTRATOR_PRODUCT_UPDATE_plt"
                 partnerRole="LOG_ORCHESTRATOR_PRODUCT_UPDATE_role"/>
    <partnerLink name="FaultNotificationService" partnerLinkType="ns10:FaultNotificationService"
                 partnerRole="FaultNotification_Port"/>
    <partnerLink name="PromotionQueue" partnerLinkType="ns11:Produce_Message_plt"
                 partnerRole="Produce_Message_role"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="client:BasicContinueOrderRequest_msg"/>

    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable" messageType="client:BasicContinueOrderResponse_msg"/>
    <variable name="Invoke_LogD_Input"
              messageType="ns2:LOG_ORCHESTRATOR_D_STATUSSelect_inputParameters"/>
    <variable name="Invoke_LogD_Output" messageType="ns2:LogOrchestratorProductCollection_msg"/>
    <variable name="Invoke_ContinueProvisioningService_Input"
              messageType="ns6:BasicContinueOrderRequest_msg"/>
    <variable name="Invoke_ContinueProvisioningService_Output"
              messageType="ns6:BasicContinueOrderResponse_msg"/>
    <variable name="generalResponse" messageType="client:GeneralResponse_msg"/>
    <variable name="Invoke_LogDUpdate_Input"
              messageType="ns8:LogOrchestratorProductCollection_msg"/>
    <variable name="Invoke_LogD_Select_Input"
              messageType="ns2:LOG_ORCHESTRATOR_D_STATUSSelect_inputParameters"/>
    <variable messageType="ns10:generalResponseMsg" name="globalFault"/>
    <variable name="Invoke_NotificationQueue_Input" messageType="ns11:Produce_Message_msg"/>
    <variable name="ProcessStatus" type="xsd:string"/>
  </variables>
  <faultHandlers>
    <catch faultName="ns10:fault" faultVariable="responseFault" faultElement="ns7:GeneralResponse">
      <sequence name="FaultNotification">
        <scope name="LogUpdateProduct" exitOnStandardFault="no">
          <invoke name="Invoke_LogUpdateProduct" partnerLink="LOG_ORCHESTRATOR_PRODUCT_UPDATE"
                  portType="ns8:LOG_ORCHESTRATOR_PRODUCT_UPDATE_ptt" operation="update"
                  inputVariable="Invoke_LogDUpdate_Input" bpelx:invokeAsDetail="no"/>
        </scope>
        <reply name="ReplyFault" faultName="client:fault" variable="generalResponse"
               partnerLink="continueprovisioningprocess_client"
               portType="client:BasicContinueOrderPort" operation="ContinueOrder"/>
        <exit name="Exit1"/>
      </sequence>
    </catch>
  </faultHandlers>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in ContinueProvisioningProcess.wsdl) -->
    <receive name="receiveInput" partnerLink="continueprovisioningprocess_client" portType="client:BasicContinueOrderPort" operation="ContinueOrder" variable="inputVariable" createInstance="yes"/>

    <!-- Generate reply to synchronous request -->
    <if name="If_Error">
      <documentation>Error</documentation>
      <condition>$inputVariable.body/ns21:orderState/status != '00' and $inputVariable.body/ns21:orderState/status != '100'</condition>
      <assign name="Assign_ErrorToStatus">
        <copy>
          <from>'ERROR'</from>
          <to>$ProcessStatus</to>
        </copy>
      </assign>
      <else>
        <documentation>Ok</documentation>
      <assign name="Assign_OkToStatus">
          <copy>
            <from>'OK'</from>
            <to>$ProcessStatus</to>
          </copy>
        </assign>        
      </else>
    </if>
    <scope name="LogOrchestratorD" exitOnStandardFault="no">
      <sequence name="LogOrchestratorD">
        <assign name="Assign_LogOrchestratorDReq">
          <copy>
            <from>$inputVariable.body/ns4:basicRequest/utiReference</from>
            <to>$Invoke_LogD_Select_Input.LOG_ORCHESTRATOR_D_STATUSSelect_inputParameters/ns5:correlationId</to>
          </copy>
          <copy>
            <from>'PENDING'</from>
            <to>$Invoke_LogD_Select_Input.LOG_ORCHESTRATOR_D_STATUSSelect_inputParameters/ns5:status</to>
          </copy>
        </assign>
        <invoke name="Invoke_LogD" partnerLink="LOG_ORCHESTRATOR_D_STATUS"
                portType="ns2:LOG_ORCHESTRATOR_D_STATUS_ptt"
                operation="LOG_ORCHESTRATOR_D_STATUSSelect" inputVariable="Invoke_LogD_Select_Input"
                outputVariable="Invoke_LogD_Output" bpelx:invokeAsDetail="no"/>
      </sequence>
    </scope>
    <if name="Transaction">
      <documentation>Not Empty</documentation>
      <condition>ora:countNodes('Invoke_LogD_Output','LogOrchestratorProductCollection','ns5:LogOrchestratorProduct') > 0</condition>
      <sequence name="Orders">
        <forEach parallel="no" counterName="productCounter" name="Orders">
          <startCounterValue>1</startCounterValue>
          <finalCounterValue>ora:countNodes('Invoke_LogD_Output','LogOrchestratorProductCollection','ns5:LogOrchestratorProduct')</finalCounterValue>
          <scope name="Orders" exitOnStandardFault="no">
            <sequence name="Order">
              <if name="If_StatusIsOk">
                <documentation>Status Is Ok</documentation>
                <condition>$ProcessStatus = 'OK'</condition>
                <scope name="ContinueProvisioningService"
                       exitOnStandardFault="no">
                  <faultHandlers>
                    <catch faultName="ns6:fault" faultVariable="faultVariable"
                           faultElement="ns7:GeneralResponse">
                      <sequence name="fault">
                        <assign name="AssignLogProductUpdateReq">
                          <copy>
                            <from>$Invoke_LogD_Output.LogOrchestratorProductCollection/ns5:LogOrchestratorProduct[$productCounter]/ns5:id</from>
                            <to>$Invoke_LogDUpdate_Input.LogOrchestratorProductCollection/ns9:LogOrchestratorProduct/ns9:id</to>
                          </copy>
                          <copy>
                            <from>$faultVariable/uti</from>
                            <to>$Invoke_LogDUpdate_Input.LogOrchestratorProductCollection/ns9:LogOrchestratorProduct/ns9:uti</to>
                          </copy>
                          <copy>
                            <from>$Invoke_LogD_Output.LogOrchestratorProductCollection/ns5:LogOrchestratorProduct[$productCounter]/ns5:correlationId</from>
                            <to>$Invoke_LogDUpdate_Input.LogOrchestratorProductCollection/ns9:LogOrchestratorProduct/ns9:correlationId</to>
                          </copy>
                          <copy>
                            <from>'ERROR'</from>
                            <to>$Invoke_LogDUpdate_Input.LogOrchestratorProductCollection/ns9:LogOrchestratorProduct/ns9:status</to>
                          </copy>
                        </assign>
                        <assign name="AssignReply">
                          <copy>
                            <from>$faultVariable/uti</from>
                            <to>$generalResponse.fault/uti</to>
                          </copy>
                          <copy>
                            <from>$faultVariable/status</from>
                            <to>$generalResponse.fault/status</to>
                          </copy>
                          <copy>
                            <from>$faultVariable/code</from>
                            <to>$generalResponse.fault/code</to>
                          </copy>
                          <copy>
                            <from>$faultVariable/message</from>
                            <to>$generalResponse.fault/message</to>
                          </copy>
                        </assign>
                        <throw name="FaultNotification" faultName="ns10:fault"
                               faultVariable="globalFault"/>
                      </sequence>
                    </catch>
                  </faultHandlers>
                  <sequence name="ContinueProvisioningService">
                    <assign name="Assign_ContinueReq">
                      <copy>
                        <from>$Invoke_LogD_Output.LogOrchestratorProductCollection/ns5:LogOrchestratorProduct[$productCounter]/ns5:uti</from>
                        <to>$Invoke_ContinueProvisioningService_Input.body/ns4:basicRequest/utiReference</to>
                      </copy>
                      <copy ignoreMissingFromData="yes">
                        <from>$inputVariable.body/ns4:basicRequest/externalApplicationID</from>
                        <to>$Invoke_ContinueProvisioningService_Input.body/ns4:basicRequest/externalApplicationID</to>
                      </copy>
                      <copy ignoreMissingFromData="yes">
                        <from>$inputVariable.body/ns4:basicRequest/externalTransactionID</from>
                        <to>$Invoke_ContinueProvisioningService_Input.body/ns4:basicRequest/externalTransactionID</to>
                      </copy>
                    </assign>
                    <invoke name="Invoke_ContinueProvisioningService"
                            partnerLink="ContinueProvisioningMediator.ContinueProvisioningMediator"
                            portType="ns6:BasicContinueOrderPort"
                            operation="ContinueOrder"
                            inputVariable="Invoke_ContinueProvisioningService_Input"
                            outputVariable="Invoke_ContinueProvisioningService_Output"
                            bpelx:invokeAsDetail="no"/>
                  </sequence>
                </scope>
              </if>
              <scope name="UpdateLogD" exitOnStandardFault="no">
                <sequence name="UpdateLogD">
                  <assign name="AssignLogDUpdateReq">
                    <copy>
                      <from>$Invoke_LogD_Output.LogOrchestratorProductCollection/ns5:LogOrchestratorProduct[$productCounter]/ns5:id</from>
                      <to>$Invoke_LogDUpdate_Input.LogOrchestratorProductCollection/ns9:LogOrchestratorProduct/ns9:id</to>
                    </copy>
                    <copy>
                      <from>$Invoke_LogD_Output.LogOrchestratorProductCollection/ns5:LogOrchestratorProduct[$productCounter]/ns5:correlationId</from>
                      <to>$Invoke_LogDUpdate_Input.LogOrchestratorProductCollection/ns9:LogOrchestratorProduct/ns9:correlationId</to>
                    </copy>
                    <copy>
                      <from>$ProcessStatus</from>
                      <to>$Invoke_LogDUpdate_Input.LogOrchestratorProductCollection/ns9:LogOrchestratorProduct/ns9:status</to>
                    </copy>
                    <copy ignoreMissingFromData="yes">
                      <from>$Invoke_ContinueProvisioningService_Output.body/generalResponse/uti</from>
                      <to>$Invoke_LogDUpdate_Input.LogOrchestratorProductCollection/ns9:LogOrchestratorProduct/ns9:uti</to>
                    </copy>
                  </assign>
                  <invoke name="Invoke_LogDUpdate" partnerLink="LOG_ORCHESTRATOR_PRODUCT_UPDATE"
                          portType="ns8:LOG_ORCHESTRATOR_PRODUCT_UPDATE_ptt" operation="update"
                          inputVariable="Invoke_LogDUpdate_Input" bpelx:invokeAsDetail="no"/>
                </sequence>
              </scope>
            </sequence>
          </scope>
        </forEach>
      </sequence>
    </if>
    <sequence name="Reply">
      <assign name="AssignReply">
        <copy>
          <from>ora:getECID()</from>
          <to>$outputVariable.body/generalResponse/status</to>
        </copy>
        <copy>
          <from>'01'</from>
          <to>$outputVariable.body/generalResponse/code</to>
        </copy>
        <copy>
          <from>'Service has been completed'</from>
          <to>$outputVariable.body/generalResponse/message</to>
        </copy>
        <copy>
          <from>ora:getECID()</from>
          <to>$outputVariable.body/generalResponse/uti</to>
        </copy>
      </assign>
      <reply name="replyOutput" partnerLink="continueprovisioningprocess_client"
             portType="client:BasicContinueOrderPort" operation="ContinueOrder"
             variable="outputVariable"/>
    </sequence>
  </sequence>
</process>